import React, { useState, useRef, useEffect } from 'react';
import { Camera, Mic, MicOff, Video, VideoOff, LogOut, UserCheck, UserPlus, Shield, Eye, Users, AlertTriangle } from 'lucide-react';
import * as faceapi from 'face-api.js';

interface User {
  id: string;
  username: string;
  audioBlob?: Blob;
}

interface DetectionData {
  timestamp: number;
  direction: string;
  confidence: number;
}

const App: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [cameraActive, setCameraActive] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [authMode, setAuthMode] = useState<'login' | 'register'>('login');
  const [username, setUsername] = useState('');
  const [status, setStatus] = useState('Normal');
  const [statusColor, setStatusColor] = useState('green');
  const [detectionStats, setDetectionStats] = useState({
    totalDetections: 0,
    suspiciousCount: 0,
    normalCount: 0
  });
  
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const detectionHistoryRef = useRef<DetectionData[]>([]);
  const animationFrameRef = useRef<number>();

  // Load face-api.js models
  useEffect(() => {
    const loadModels = async () => {
      try {
        await Promise.all([
          faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
          faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
          faceapi.nets.faceRecognitionNet.loadFromUri('/models'),
        ]);
        console.log('‚úÖ Face-api.js models loaded');
      } catch (error) {
        console.error('‚ùå Failed to load face-api.js models:', error);
      }
    };
    loadModels();
  }, []);

  // Audio recording functionality
  const startAudioRecording = async (): Promise<Blob> => {
    return new Promise(async (resolve, reject) => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const mediaRecorder = new MediaRecorder(stream);
        const chunks: Blob[] = [];

        mediaRecorder.ondataavailable = (event) => {
          if (event.data.size > 0) {
            chunks.push(event.data);
          }
        };

        mediaRecorder.onstop = () => {
          const audioBlob = new Blob(chunks, { type: 'audio/wav' });
          stream.getTracks().forEach(track => track.stop());
          resolve(audioBlob);
        };

        setIsRecording(true);
        mediaRecorder.start();

        // Record for 4 seconds
        setTimeout(() => {
          setIsRecording(false);
          mediaRecorder.stop();
        }, 4000);
      } catch (error) {
        reject(error);
      }
    });
  };

  // Simple audio comparison (placeholder - in real app would use proper audio analysis)
  const compareAudio = (blob1: Blob, blob2: Blob): Promise<number> => {
    return new Promise((resolve) => {
      // Simplified comparison - in real app would analyze audio features
      const similarity = Math.random() * 30 + 70; // 70-100% similarity
      resolve(similarity);
    });
  };

  // User registration
  const handleRegister = async () => {
    if (!username.trim()) {
      alert('Please enter a username');
      return;
    }

    if (users.find(u => u.username === username)) {
      alert('Username already exists');
      return;
    }

    try {
      const audioBlob = await startAudioRecording();
      const newUser: User = {
        id: Date.now().toString(),
        username: username.trim(),
        audioBlob
      };

      setUsers(prev => [...prev, newUser]);
      alert('User registered successfully!');
      setUsername('');
      setAuthMode('login');
    } catch (error) {
      alert('Failed to record audio');
    }
  };

  // User login
  const handleLogin = async () => {
    if (!username.trim()) {
      alert('Please enter a username');
      return;
    }

    const user = users.find(u => u.username === username);
    if (!user || !user.audioBlob) {
      alert('User not found');
      return;
    }

    try {
      const loginAudio = await startAudioRecording();
      const similarity = await compareAudio(user.audioBlob, loginAudio);

      if (similarity > 75) {
        setCurrentUser(user);
        setIsLoggedIn(true);
        setUsername('');
        alert('Login successful!');
      } else {
        alert('Audio authentication failed');
      }
    } catch (error) {
      alert('Failed to authenticate');
    }
  };

  // Logout
  const handleLogout = () => {
    setIsLoggedIn(false);
    setCurrentUser(null);
    setCameraActive(false);
    setStatus('Normal');
    setStatusColor('green');
    setDetectionStats({ totalDetections: 0, suspiciousCount: 0, normalCount: 0 });
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
  };

  // Start camera
  const startCamera = async () => {
    console.log("üöÄ startCamera function triggered");

    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { width: 640, height: 480 }
      });
      console.log("‚úÖ Camera stream acquired:", stream);

      streamRef.current = stream;
      setCameraActive(true);
    } catch (error) {
      console.error("‚ùå Failed to access camera:", error);
    }
  };

  // Stop camera
  const stopCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    setCameraActive(false);
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
    }
  };

  // Simplified behavior detection without baseline calibration
  const detectBehavior = () => {
    if (!videoRef.current || !canvasRef.current) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) return;

    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    ctx.drawImage(video, 0, 0);

    const currentTime = Date.now();
    const recentDetections = detectionHistoryRef.current.filter(
      d => currentTime - d.timestamp < 10000 // Last 10 seconds
    );

    // Simulate face detection and behavior analysis
    const randomBehavior = Math.random();
    let detectedDirection = 'normal';
    let confidence = 0.9;

    // Simulate different behaviors
    if (randomBehavior < 0.08) {
      detectedDirection = 'looking_down';
      confidence = 0.85;
    } else if (randomBehavior < 0.12) {
      detectedDirection = 'looking_away';
      confidence = 0.75;
    } else if (randomBehavior < 0.16) {
      detectedDirection = 'excessive_movement';
      confidence = 0.7;
    } else if (randomBehavior < 0.18) {
      detectedDirection = 'multiple_faces';
      confidence = 0.9;
    }

    // Add to detection history
    detectionHistoryRef.current.push({
      timestamp: currentTime,
      direction: detectedDirection,
      confidence
    });

    // Keep only last 200 detections
    if (detectionHistoryRef.current.length > 200) {
      detectionHistoryRef.current = detectionHistoryRef.current.slice(-200);
    }

    // Analyze behavior patterns
    const lookingDownCount = recentDetections.filter(d => d.direction === 'looking_down').length;
    const lookingAwayCount = recentDetections.filter(d => d.direction === 'looking_away').length;
    const excessiveMovementCount = recentDetections.filter(d => d.direction === 'excessive_movement').length;
    const multipleFacesCount = recentDetections.filter(d => d.direction === 'multiple_faces').length;
    
    const totalSuspicious = lookingDownCount + lookingAwayCount + excessiveMovementCount + multipleFacesCount;

    // Update detection stats
    setDetectionStats(prev => ({
      totalDetections: prev.totalDetections + 1,
      suspiciousCount: prev.suspiciousCount + (detectedDirection !== 'normal' ? 1 : 0),
      normalCount: prev.normalCount + (detectedDirection === 'normal' ? 1 : 0)
    }));

    // Determine status based on recent behavior
    let newStatus = 'Normal';
    let newStatusColor = 'green';

    if (multipleFacesCount >= 2) {
      newStatus = 'Multiple people detected';
      newStatusColor = 'red';
    } else if (lookingDownCount >= 6) {
      newStatus = 'Inappropriate behavior';
      newStatusColor = 'red';
    } else if (excessiveMovementCount >= 5) {
      newStatus = 'Cheating detected';
      newStatusColor = 'red';
    } else if (totalSuspicious >= 8) {
      newStatus = 'Highly suspicious activity';
      newStatusColor = 'red';
    } else if (lookingDownCount >= 3) {
      newStatus = 'Suspicious - looking down';
      newStatusColor = 'orange';
    } else if (lookingAwayCount >= 4) {
      newStatus = 'Suspicious - looking away';
      newStatusColor = 'orange';
    } else if (totalSuspicious >= 3) {
      newStatus = 'Monitoring suspicious activity';
      newStatusColor = 'yellow';
    } else if (totalSuspicious >= 1) {
      newStatus = 'Minor irregularity detected';
      newStatusColor = 'yellow';
    }

    setStatus(newStatus);
    setStatusColor(newStatusColor);

    // Draw detection overlay on canvas
    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(10, 10, 300, 80);
    
    // Status text
    ctx.fillStyle = newStatusColor === 'red' ? '#ef4444' : 
                    newStatusColor === 'orange' ? '#f97316' :
                    newStatusColor === 'yellow' ? '#eab308' : '#22c55e';
    ctx.font = 'bold 16px Arial';
    ctx.fillText(`Status: ${newStatus}`, 20, 35);

    // Detection counts
    ctx.fillStyle = 'white';
    ctx.font = '12px Arial';
    ctx.fillText(`Recent detections (10s): ${recentDetections.length}`, 20, 55);
    ctx.fillText(`Suspicious: ${totalSuspicious} | Normal: ${recentDetections.length - totalSuspicious}`, 20, 75);

    // Timestamp
    const timestamp = new Date().toLocaleTimeString();
    ctx.fillStyle = 'white';
    ctx.font = '12px Arial';
    ctx.fillText(timestamp, canvas.width - 80, 25);

    // Draw face detection simulation
    if (detectedDirection !== 'normal') {
      ctx.strokeStyle = newStatusColor === 'red' ? '#ef4444' : '#f97316';
      ctx.lineWidth = 3;
      ctx.strokeRect(canvas.width * 0.3, canvas.height * 0.2, canvas.width * 0.4, canvas.height * 0.5);
    }
  };

  // Start behavior detection loop
  const startBehaviorDetection = () => {
    if (!videoRef.current || !canvasRef.current) return;

    const detect = async () => {
      if (!cameraActive) return; // Stop loop if camera is off

      const video = videoRef.current!;
      const canvas = canvasRef.current!;
      const ctx = canvas.getContext('2d');

      if (!ctx) return;

      // Run face detection
      const detections = await faceapi.detectAllFaces(
        video,
        new faceapi.TinyFaceDetectorOptions()
      );

      const displaySize = { width: video.videoWidth, height: video.videoHeight };
      const resizedDetections = faceapi.resizeResults(detections, displaySize);

      canvas.width = displaySize.width;
      canvas.height = displaySize.height;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(video, 0, 0);
      faceapi.draw.drawDetections(canvas, resizedDetections);

      // Cheating alert logic
      if (resizedDetections.length !== 1) {
        console.warn('‚ö†Ô∏è Cheating Detected: Multiple or No Faces');
      }

      // Run behavior detection
      detectBehavior();

      animationFrameRef.current = requestAnimationFrame(detect);
    };

    detect();
  };

  // Attach stream to video element and start detection
  useEffect(() => {
    if (cameraActive && videoRef.current && streamRef.current) {
      videoRef.current.srcObject = streamRef.current;
      videoRef.current.play().catch(error => console.error('‚ùå Video play error:', error));
      console.log("‚úÖ Stream attached to video element");
      startBehaviorDetection();
    }

    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [cameraActive]);

  // JSX
  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 p-6">
        <div className="max-w-md mx-auto">
          <div className="bg-white rounded-3xl shadow-2xl p-8 border border-gray-100">
            <div className="text-center mb-8">
              <div className="bg-gradient-to-r from-indigo-500 to-purple-600 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg">
                <Shield className="w-10 h-10 text-white" />
              </div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                Proctoring System
              </h1>
              <p className="text-gray-600 mt-3 text-lg">Secure Audio Authentication</p>
            </div>

            <div className="flex mb-8 bg-gray-50 p-1 rounded-xl">
              <button
                onClick={() => setAuthMode('login')}
                className={`flex-1 py-3 px-6 rounded-lg text-sm font-semibold transition-all duration-200 ${
                  authMode === 'login'
                    ? 'bg-white text-indigo-600 shadow-md transform scale-105'
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <UserCheck className="w-4 h-4 inline mr-2" />
                Login
              </button>
              <button
                onClick={() => setAuthMode('register')}
                className={`flex-1 py-3 px-6 rounded-lg text-sm font-semibold transition-all duration-200 ${
                  authMode === 'register'
                    ? 'bg-white text-indigo-600 shadow-md transform scale-105'
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <UserPlus className="w-4 h-4 inline mr-2" />
                Register
              </button>
            </div>

            <div className="space-y-6">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Enter username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-indigo-100 focus:border-indigo-500 outline-none transition-all duration-200 text-lg"
                />
              </div>

              <button
                onClick={authMode === 'login' ? handleLogin : handleRegister}
                disabled={isRecording}
                className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-4 px-6 rounded-xl hover:from-indigo-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center gap-3 text-lg font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 disabled:transform-none"
              >
                {isRecording ? (
                  <>
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    Recording Audio... (4s)
                  </>
                ) : (
                  <>
                    <Mic className="w-5 h-5" />
                    {authMode === 'login' ? 'Record & Login' : 'Record & Register'}
                  </>
                )}
              </button>
            </div>

            <div className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-100">
              <div className="flex items-start gap-3">
                <div className="bg-blue-100 p-2 rounded-lg">
                  <Mic className="w-5 h-5 text-blue-600" />
                </div>
                <div>
                  <h3 className="font-semibold text-blue-900 mb-2">Audio Authentication</h3>
                  <p className="text-sm text-blue-700 leading-relaxed">
                    Click the button above to record a 4-second audio sample for secure authentication. 
                    Your voice pattern will be used to verify your identity.
                  </p>
                </div>
              </div>
            </div>

            {users.length > 0 && (
              <div className="mt-6 p-4 bg-gray-50 rounded-xl">
                <p className="text-sm text-gray-600 text-center">
                  <Users className="w-4 h-4 inline mr-1" />
                  {users.length} user{users.length !== 1 ? 's' : ''} registered
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="bg-gradient-to-r from-indigo-500 to-purple-600 w-12 h-12 rounded-xl flex items-center justify-center shadow-lg">
                <Eye className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-800">Proctoring Dashboard</h1>
                <p className="text-gray-600">Welcome back, <span className="font-semibold text-indigo-600">{currentUser?.username}</span></p>
              </div>
            </div>
            <button
              onClick={handleLogout}
              className="flex items-center gap-2 px-6 py-3 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-xl transition-all duration-200 font-medium"
            >
              <LogOut className="w-5 h-5" />
              Logout
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Camera Section */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-lg p-8 border border-gray-100">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h2 className="text-2xl font-bold text-gray-800 mb-2">Live Monitoring</h2>
                  <p className="text-gray-600">Real-time behavior detection and analysis</p>
                </div>
                <div className="flex gap-4">
                  {!cameraActive ? (
                    <button
                      onClick={startCamera}
                      className="bg-gradient-to-r from-green-500 to-emerald-600 text-white px-6 py-3 rounded-xl hover:from-green-600 hover:to-emerald-700 transition-all duration-200 flex items-center gap-2 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
                    >
                      <Video className="w-5 h-5" />
                      Start Proctoring
                    </button>
                  ) : (
                    <button
                      onClick={stopCamera}
                      className="bg-gradient-to-r from-red-500 to-rose-600 text-white px-6 py-3 rounded-xl hover:from-red-600 hover:to-rose-700 transition-all duration-200 flex items-center gap-2 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
                    >
                      <VideoOff className="w-5 h-5" />
                      Stop Camera
                    </button>
                  )}
                </div>
              </div>

              {/* Video Feed */}
              <div className="relative bg-gray-900 rounded-2xl overflow-hidden shadow-inner">
                {cameraActive ? (
                  <>
                    <video
                      ref={videoRef}
                      autoPlay
                      playsInline
                      width="640"
                      height="480"
                      style={{ border: '2px solid black', borderRadius: '8px' }}
                    />

                    <canvas
                      ref={canvasRef}
                      className="absolute inset-0 w-full h-full"
                    />
                    <div className="absolute top-4 right-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center gap-2">
                      <div className="w-2 h-2 bg-white rounded-full animate-pulse"></div>
                      LIVE
                    </div>
                  </>
                ) : (
                  <div className="h-96 flex items-center justify-center text-gray-400">
                    <div className="text-center">
                      <Camera className="w-20 h-20 mx-auto mb-6 opacity-50" />
                      <h3 className="text-xl font-semibold mb-2">Camera Inactive</h3>
                      <p className="text-gray-500">Click "Start Proctoring" to begin monitoring</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Status Panel */}
          <div className="space-y-6">
            {/* Current Status */}
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
              <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
                <AlertTriangle className="w-5 h-5" />
                Current Status
              </h3>
              <div className={`p-6 rounded-xl border-2 transition-all duration-300 ${
                statusColor === 'red' ? 'bg-red-50 border-red-200' :
                statusColor === 'orange' ? 'bg-orange-50 border-orange-200' :
                statusColor === 'yellow' ? 'bg-yellow-50 border-yellow-200' :
                'bg-green-50 border-green-200'
              }`}>
                <div className="flex items-center gap-4">
                  <div className={`w-4 h-4 rounded-full animate-pulse ${
                    statusColor === 'red' ? 'bg-red-500' :
                    statusColor === 'orange' ? 'bg-orange-500' :
                    statusColor === 'yellow' ? 'bg-yellow-500' :
                    'bg-green-500'
                  }`}></div>
                  <span className={`font-bold text-lg ${
                    statusColor === 'red' ? 'text-red-800' :
                    statusColor === 'orange' ? 'text-orange-800' :
                    statusColor === 'yellow' ? 'text-yellow-800' :
                    'text-green-800'
                  }`}>
                    {status}
                  </span>
                </div>
              </div>
            </div>

            {/* Detection Statistics */}
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
              <h3 className="text-xl font-bold text-gray-800 mb-4">Detection Stats</h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="text-gray-600">Total Detections</span>
                  <span className="font-bold text-gray-800">{detectionStats.totalDetections}</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-green-50 rounded-lg">
                  <span className="text-green-700">Normal Behavior</span>
                  <span className="font-bold text-green-800">{detectionStats.normalCount}</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-red-50 rounded-lg">
                  <span className="text-red-700">Suspicious Activity</span>
                  <span className="font-bold text-red-800">{detectionStats.suspiciousCount}</span>
                </div>
              </div>
            </div>

            {/* System Features */}
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
              <h3 className="text-xl font-bold text-gray-800 mb-4">System Features</h3>
              <div className="space-y-3">
                {[
                  { icon: Mic, text: 'Audio Authentication', color: 'text-blue-600' },
                  { icon: Eye, text: 'Real-time Detection', color: 'text-green-600' },
                  { icon: AlertTriangle, text: 'Behavior Analysis', color: 'text-orange-600' },
                  { icon: Users, text: 'Multi-person Detection', color: 'text-purple-600' },
                  { icon: Shield, text: 'Cheating Prevention', color: 'text-red-600' },
                  { icon: Camera, text: 'Live Monitoring', color: 'text-indigo-600' }
                ].map((feature, index) => (
                  <div key={index} className="flex items-center gap-3 p-2 hover:bg-gray-50 rounded-lg transition-colors">
                    <feature.icon className={`w-5 h-5 ${feature.color}`} />
                    <span className="text-gray-700 font-medium">{feature.text}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Session Info */}
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
              <h3 className="text-xl font-bold text-gray-800 mb-4">Session Info</h3>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">User</span>
                  <span className="font-semibold text-indigo-600">{currentUser?.username}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Camera Status</span>
                  <span className={`font-semibold ${cameraActive ? 'text-green-600' : 'text-gray-500'}`}>
                    {cameraActive ? 'Active' : 'Inactive'}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Session Time</span>
                  <span className="font-semibold text-gray-800">{new Date().toLocaleTimeString()}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;
